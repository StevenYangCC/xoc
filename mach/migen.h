/*@
XOC Release License

Copyright (c) 2013-2014, Alibaba Group, All rights reserved.

    compiler@aliexpress.com

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Su Zhenyu nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@*/
#ifndef _MIGEN_H_
#define _MIGEN_H_

namespace elf {
class ELFMgr;
}

namespace mach {

class MFieldMgr;
class MInst;
class MInstMgr;
class IR2MInst;
class MIRelocMgr;
class MIList;
class IMCtx;

class MIGen {
protected:
    SMemPool * m_pool;
    Region * m_rg;
    elf::ELFMgr * m_em;
    MFieldMgr * m_mfmgr;
    MInstMgr * m_mimgr;
    IR2MInst * m_ir2minst;
    MIRelocMgr * m_relocmgr;
protected:
    virtual IR2MInst * allocIR2MInst();
    virtual MFieldMgr * allocMFieldMgr();
    virtual MInstMgr * allocMInstMgr();
    virtual MIRelocMgr * allocMIRelocMgr();

    //Convert IRs to machine instructions.
    void convertIR2MI(OUT MIList & milst, MOD IMCtx * cont);

    //Convert generated machine instructions to binary codes.
    void convertMIListToCode(MIList const& milst);

    void destroy();
    void destroyMgr();

    //Generate debug_frame information.
    void genFrameInfo(MIList & mcfi_list);

    //Get memory alignment of target machine.
    virtual TMWORD getMemoryAlignment() const { return MEMORY_ALIGNMENT; }

    //Generate debug_line information.
    void genLineInfo(MIList & milst);
    Region * getRegion() const { return m_rg; }

    void performRelocation(MOD MIList & milst, MOD IMCtx * cont);

    //A helper function to extract values from "asdescvec" and set them into
    //fields of each mi.
    void setMIBinBuf(MOD mach::MInst * mi,
                     AssembleBinDescVec const& asdescvec);

    void * xmalloc(UINT size);
public:
    explicit MIGen(Region * rg, elf::ELFMgr * em);
    virtual ~MIGen() { destroy(); }

    //Collect all the calling relocations by traversing the milst.
    //The insts generated by the compiler may contain references to external
    //symbols such as calling functions, global variables, etc. But the actual
    //addresses of these symbols are unknown in compiling phase, so the
    //compiler generates placeholders such as zero address and record these
    //positions through different types of relocation for later refilling by
    //the linker.
    //e.g:
    //A function MI list:
    // ...
    // e0:    store  $52, 0($30)
    // e4:    load   $27, 0($29)
    // e8:    call   $26, ($27), 0
    // ec:    loadh  $29, 0($26)
    // f0:    load   $29, 0($29)
    // ...
    //In the MI list, 'call' will generate a 'literal using' type relocation
    //and 'loadh' will generate a 'GP displacement' type relocation. These
    //relocations could help linker refill the insts with actual addresses in
    //the program instead of '0'.
    virtual void collectCallRelocation(MIList const& milst)
    { ASSERTN(0, ("Target Dependent Code")); }

    //Collect the RelaxBrInfo and register indirect jump offset saving info
    //in the whole milst for linker relaxation.
    //Since register indirect jump jumps directly to the target PC, it consists
    //of the two parts of the IR: PC saving IR and jmp IR. For example, for a
    //register indirect jmp operation that jumps to label1, the IR is as
    //follows:
    //
    //  stpr $0:u64             --> Its semantics is to save the PC value of
    //    case                      label1 to register $0.
    //      intconst:u64 0|0x0
    //      label label1
    //
    //  igoto:any               --> Use an IGoto IR to achieve register
    //    $0:u64                    indirect jmp.
    //    case
    //      intconst:u64 0|0x0
    //      label label3
    //    case
    //      intconst:u64 1|0x1
    //      label label1
    //    case ...
    //
    //For IGoto IR, the BROpt module has handled CASE IR and generates
    //correct PC calculation instructions. For the upper case IR, it will be
    //simplified to the following IRs:
    //
    //-------------------------------------------------------------------------
    //          before       |                        after                   |
    //-------------------------------------------------------------------------
    //                       |                                                |
    //......                 |   ......                                       |
    //                       |                                                |
    //stpr $0:u64            | --------------------                           |
    //  case                 | | goto label _$L1  | --> Save current PC in    |
    //    intconst:u64 0|0x0 | |                  |     $current_pc.          |
    //    label label1       | | label _$L1       | --> It will not be        |
    //            |          | |                  |     written into the      |
    //......      |----------->|                  |     final instruction     |
    //                       | |                  |     sequence.             |
    //                       | | stpr $distance   | --> There may be multiple |
    //label label1           | |   intconst:u64 val     IRs to load immediate |
    //                       | |                  |     data since it may be  |
    //......                 | |                  |     particularly large.   |
    //                       | |                  |     It needs to be        |
    //                       | |                  |     implemented           |
    //                       | |                  |     specifically based    |
    //                       | |                  |     on the hardware.      |
    //                       | |                  |                           |
    //                       | | stpr $0:u64      | --> Add distance and      |
    //                       | |   add.u64        |     current PC to get     |
    //                       | |     $distance    |     real PC. Then save it |
    //                       | |     $current_pc  |     into source register. |
    //                       | --------------------                           |
    //                       | ......                                         |
    //                       |                                                |
    //                       | label label1                                   |
    //                       |                                                |
    //                       | ......                                         |
    //-------------------------------------------------------------------------
    //But in linking phase, instructions generated from these IRs may be
    //affected because NOP inst will be deleted by linker relaxation pass.
    //The distance will decrease and immediate data in these instructions need
    //to be recalculated and refilled. So we need collect these info as
    //RelaxBrInfo.
    //NOTE:
    //1. Only need record the first inst because the instructions generated
    //   from these IRs will be continuous.
    //2. Record some kinds of info when these IRs are generated and record
    //   the others when the milst are generated.
    void collectLinkerRelaxBrInfo(MIList const& milst);

    void dump(MIList const& milst) const;

    virtual IR2MInst * getIR2MInst() { return m_ir2minst; }

    //Initialize class managers. Requires architecture specific allocation
    //functions.
    void initMgr();

    //The function generates target dependent MI information.
    virtual bool perform();

    //Separate the instructions into regular instructions and CFI instructions.
    void separateMIListAndCFIList(MOD MInstMgr & imgr,
        MIList const& milst_all, MIList & milst, MIList & mcfi_list);

    //Verify each MI in the milst has a corresponding IR.
    bool verifyMIListValid(MIList & milst) const;
};

} //namespace mach

#endif
