$(info "====---- START Makefile.xoc ----====")

ifeq ($(TARG),)
  $(error "NEED TARG INFO:e.g:make TARG=FOR_ARM TARG_DIR=arm")
endif

ifeq ($(TARG_DIR),)
  $(error "NEED TARG_DIR INFO:e.g:make TARG=FOR_ARM TARG_DIR=arm")
endif

ifeq ($(THREAD_NUM),)
  THREAD_NUM:=1
endif

override ROOT_DIR:=$(CURDIR)

COM_DIR:=$(ROOT_DIR)/com
OPT_DIR:=$(ROOT_DIR)/opt
READER_DIR:=$(ROOT_DIR)/reader
MACH_DIR:=$(ROOT_DIR)/mach
CURFILE:=$(ROOT_DIR)/Makefile.xoc

#Check wether each directory is valid.
ifeq ($(wildcard $(ROOT_DIR)),)
  $(error "$(ROOT_DIR) SEEMS NOT VALID DIR.")
else ifeq ($(wildcard $(COM_DIR)),)
  $(error "$(COM_DIR) SEEMS NOT VALID DIR.")
else ifeq ($(wildcard $(OPT_DIR)),)
  $(error "$(OPT_DIR) SEEMS NOT VALID DIR.")
else ifeq ($(wildcard $(READER_DIR)),)
  $(error "$(READER_DIR) SEEMS NOT VALID DIR.")
else ifeq ($(wildcard $(MACH_DIR)),)
  $(error "$(MACH_DIR) SEEMS NOT VALID DIR.")
endif

$(info "INCLUDE: IN $(CURFILE), INCLUDE $(READER_DIR)/Makefile.inc")
include $(READER_DIR)/Makefile.inc

$(info "INCLUDE: IN $(CURFILE), INCLUDE $(COM_DIR)/Makefile.inc")
include $(COM_DIR)/Makefile.inc

$(info "INCLUDE: IN $(CURFILE), INCLUDE $(OPT_DIR)/Makefile.inc")
include $(OPT_DIR)/Makefile.inc

$(info "INCLUDE: IN $(CURFILE), INCLUDE $(MACH_DIR)/Makefile.inc")
include $(MACH_DIR)/Makefile.inc

$(info "INCLUDE: IN $(CURFILE), INCLUDE $(ROOT_DIR)/Makefile.xoc.inc")
include $(ROOT_DIR)/Makefile.xoc.inc

$(info "INCLUDE: IN $(CURFILE), INCLUDE $(ROOT_DIR)/Makefile.option")
include $(ROOT_DIR)/Makefile.option

CFLAGS+=-Wall
CFLAGS+=\
  -D$(TARG) \
  -D_SUPPORT_C11_ \
  -Wno-unknown-pragmas \
  -Wno-write-strings \
  -Wsign-promo \
  -Wparentheses \
  -Wformat \
  -Wsign-compare \
  -Wpointer-arith \
  -Wno-multichar \
  -Winit-self \
  -Wswitch

#Disable -Wconversion to avoid too much complaints.

ifneq (,$(filter $(CC),g++ gcc))
  CFLAGS+=-Wno-strict-aliasing -finline-limit=10000000
endif

INC:=-I .

#Combine path of objects.
TMP_OPT_OBJS = $(foreach n,$(OPT_OBJS),$(OPT_DIR)/$(n))
TMP_READER_OBJS = $(foreach n,$(READER_OBJS),$(READER_DIR)/$(n))
ifeq ($(REF_TARGMACH_INFO),true)
  TMP_MACH_OBJS = $(foreach n,$(MACH_OBJS),$(MACH_DIR)/$(n))
else
  TMP_MACH_OBJS =
endif

#Display internal variables.
$(info "COMBINED OPT OBJS:$(TMP_OPT_OBJS)")
$(info "COMBINED READER OBJS:$(TMP_READER_OBJS)")
$(info "COMBINED MACH OBJS:$(TMP_MACH_OBJS)")
$(info "TARG:$(TARG)")
$(info "TARG_DIR:$(TARG_DIR)")
$(info "CURDIR:$(CURDIR)")
$(info "ROOT_DIR:$(ROOT_DIR)")
$(info "CC:$(CC)")
$(info "INC:$(INC)")
$(info "CFLAGS:$(CFLAGS)")
$(info "DEBUG:$(DEBUG)")
$(info "THREAD_NUM:$(THREAD_NUM)")
$(info "REF_TARGMACH_INFO:$(REF_TARGMACH_INFO)")

.PHONY: build_tmp_opt_objs build_tmp_reader_objs build_tmp_mach_objs

$(XOC_OUTPUT): $(COM_OUTPUT) \
               build_tmp_opt_objs \
               build_tmp_reader_objs \
               build_tmp_mach_objs
	@echo "==-- IN Makefile.xoc: START BUILD $(XOC_OUTPUT) --=="
	@if [ ! -f "$@" ] || [ "$<" -nt "$@" ]; then \
       echo "EXEC:"; \
       ar -rvscT $(XOC_OUTPUT) \
         $(COM_DIR)/$(COM_OUTPUT) \
         $(TMP_OPT_OBJS) \
         $(TMP_READER_OBJS) \
         $(TMP_MACH_OBJS); \
       echo "SUCCESS TO GENERATE $(XOC_OUTPUT)!!"; \
     else \
       echo "$(XOC_OUTPUT) ALREADY EXISTS!!"; \
     fi

%.o:%.cpp
	@echo "BUILD $<"
	$(CC) $(CFLAGS) $(INC) -c $< -o $@

$(COM_OUTPUT):
	@echo "IN Makefile.xoc: START BUILD $(COM_OUTPUT)"
	@echo "EXEC:"
	make -C $(COM_DIR) \
      -j$(THREAD_NUM) \
      -f Makefile \
      TARG=$(TARG) \
      TARG_DIR=$(TARG_DIR) \
      DEBUG=$(DEBUG) \
      ROOT_DIR=$(ROOT_DIR) \
      CFLAGS="$(CFLAGS)" \
      THREAD_NUM=$(THREAD_NUM) \
      REF_TARGMACH_INFO=$(REF_TARGMACH_INFO)
	@echo "IN Makefile.xoc: END BUILD $(COM_OUTPUT)"

build_tmp_opt_objs: pre_build_tmp_opt_objs $(TMP_OPT_OBJS)
	@echo "SUCCESS TO GENERATE: $(TMP_OPT_OBJS)"

pre_build_tmp_opt_objs:
	@echo "START BUILD: $(TMP_OPT_OBJS)"

build_tmp_reader_objs: pre_build_tmp_reader_objs $(TMP_READER_OBJS)
	@echo "SUCCESS TO GENERATE: $(TMP_READER_OBJS)"

pre_build_tmp_reader_objs:
	@echo "START BUILD: $(TMP_READER_OBJS)"

build_tmp_mach_objs: pre_build_tmp_mach_objs $(TMP_MACH_OBJS)
	@echo "SUCCESS TO GENERATE: $(TMP_MACH_OBJS)"

pre_build_tmp_mach_objs:
	@echo "START BUILD: $(TMP_MACH_OBJS)"

bulid_opt_objs: pre_build_opt_objs $(OPT_OBJS)
	@echo "SUCCESS TO GENERATE: $(OPT_OBJS)"

pre_build_opt_objs:
	@echo "START BUILD: $(OPT_OBJS)"

build_reader_objs: pre_build_reader_objs $(READER_OBJS)
	@echo "SUCCESS TO GENERATE: $(READER_OBJS)"

pre_build_reader_objs:
	@echo "START BUILD: $(READER_OBJS)"

build_mach_objs: pre_build_mach_objs $(MACH_OBJS)
	@echo "SUCCESS TO GENERATE: $(MACH_OBJS)"

pre_build_mach_objs:
	@echo "START BUILD: $(MACH_OBJS)"

clean:
	make clean -C $(COM_DIR) -f Makefile \
      TARG=$(TARG) \
      DEBUG=$(DEBUG) \
      CFLAGS="$(CFLAGS)" \
      REF_TARGMACH_INFO=$(REF_TARGMACH_INFO)
	@find ./ -name "*.gcda" | xargs rm -f
	@find ./ -name "*.gcno" | xargs rm -f
	@find ./ -name "*.o" | xargs rm -f
	@find ./ -name "*.d" | xargs rm -f
	@find ./ -name "*.a" | xargs rm -f
	@find ./ -name "*.dot" | xargs rm -f
	@find ./ -name "*.exe" | xargs rm -f
	@find ./ -name "*.elf" | xargs rm -f
	@find ./ -name "*.out" | xargs rm -f
	@find ./ -name "*.tmp" | xargs rm -f
	@find ./ -name "*.vcg" | xargs rm -f
	@find ./ -name "*.cxx" | xargs rm -f
	@find ./ -name "*.asm" | xargs rm -f
	@find ./ -name "*.swp" | xargs rm -f
	@find ./ -name "*.swo" | xargs rm -f
	@find ./ -name "*.log" | xargs rm -f
	@find ./ -name "*.LOGLOG" | xargs rm -f
	@find ./ -name "LOGLOG" | xargs rm -f

-include $(READER_DIR)/*.d
-include $(COM_DIR)/*.d
-include $(OPT_DIR)/*.d
-include $(MACH_DIR)/*.d

$(info "====---- END Makefile.xoc ----====")
