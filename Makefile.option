#SET DEBUG FLAG
ifeq ($(DEBUG),)
  #Default build mode is DEBUG mode.
  DEBUG=true
endif

CFLAGS+=-Wno-bool-compare

ifeq ($(DEBUG), true)
  #Add predefined macro if build host is Windows.
  CFLAGS+=-D_DEBUG_
  CFLAGS+=-O0 -g2
  CFLAGS+=-MMD #Ask compiler generate dependent files information.
else
  CFLAGS+=-O2
  CFLAGS+=-MMD #Ask compiler generate dependent files information.
endif

ifeq ($(REF_TARGMACH_INFO),true)
  CFLAGS+=-DREF_TARGMACH_INFO #LSRA use targmach info
endif

#The code attemps to compile an empty C++ file with the option, and
#return YES if compilation is successful, otherwise return NO. The return info
#is record in a makefile variable.
CC_SUPPORTS_C11 := $(shell echo "" | \
  $(CC) -std=c++11 -c -x c++ \
  - > /dev/null 2>&1 && echo YES || echo NO)
ifeq ($(CC_SUPPORTS_C11),YES)
  $(info "NOTE:$(CC) SUPPORT C++11")
  CFLAGS+=-std=c++11
else
  $(info "NOTE:$(CC) DOES NOT SUPPORT C++11")
endif

#The code attemps to compile an empty C++ file with the warning option, and
#return YES if compilation is successful, otherwise return NO. The return info
#is record in a makefile variable.
CC_SUPPORTS_WNO_MISMATCHED_NEW_DELETE := $(shell echo "" | \
  $(CC) -Wno-mismatched-new-delete -c -x c++ \
  - > /dev/null 2>&1 && echo YES || echo NO)
ifeq ($(CC_SUPPORTS_WNO_MISMATCHED_NEW_DELETE),YES)
  $(info "NOTE:$(CC) SUPPORT -Wno-mismatched-new-delete")
  #The warning is NOT effect without optimization, thus code must be
  #compiled with the -O2 option in order for GCC to find the bug.
  CFLAGS+=-Wno-mismatched-new-delete
else
  $(info "NOTE:$(CC) DOES NOT SUPPORT -Wno-mismatched-new-delete")
endif

#To conveninently use DUMMYUSE, some compiler will complain for comma
#expression.
USE_DUMMYUSE=true
ifeq ($(USE_DUMMYUSE), true)
  CFLAGS+=-Wno-unused-value
endif

#ADD OS FLAG
ifeq ($(WIN), true)
  $(info "ON WINDOWS")
  #Add predefined macro if build host is Windows.
  CFLAGS+=-D_ON_WINDOWS_
  ifeq ($(WSL), true)
    CFLAGS+=-D_USE_GCC_
  endif
else
  $(info "ON LINUX OR UNIX")
  CFLAGS+=-D_USE_GCC_
endif

#SET COMPILER
ifeq ($(WIN), true)
  $(info "ON WINDOWS")
  ifeq ($(WSL), true)
    ifndef CC
      CC:=$(shell which clang++ > /dev/null)
      ifndef CC
        CC=$(if $(shell which clang),clang.exe,gcc.exe)
      endif
    endif
  else
    $(error "THERE IS NO CC COMPILER AVAIABLE WITHOUT WSL ENVIRONMENT")
  endif
  ifndef CC
    $(error "THERE IS NO CC COMPILER AVAIABLE")
    #$(info "CC is defined="$(CC))
  endif
else
  $(info "ON LINUX OR UNIX")
  ifndef CC
    CC:=$(shell which clang++ > /dev/null)
    ifndef CC
      CC=$(if $(shell which clang),clang,gcc)
    endif
  endif
  ifndef CC
    $(error "THERE IS NO CC COMPILER AVAIABLE")
  endif
endif
